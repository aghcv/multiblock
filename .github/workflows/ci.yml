name: Build and Test (CMake + Ninja)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Run only macOS for parity with your local conda-based setup
        os: [macos-latest]

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Conda environment (mirror local `environment.yml`)
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-version: 'latest'
          auto-update-conda: false
          python-version: 3.11
          auto-activate-base: false

      - name: Create conda env with mamba (retry & verbose)
        shell: bash -l {0}
        run: |
          set -o pipefail
          source "$(conda info --base)/etc/profile.d/conda.sh"
          # configure channels similarly to README
          conda config --set channel_priority strict
          conda config --add channels conda-forge

          echo "Listing conda info and base packages"
          conda info
          conda list

          # Use mamba (if present) for faster, more robust solves; retry on failure
          CREATE_CMD="mamba env create -f environment.yml -n cxxgeom"
          echo "Running: $CREATE_CMD"
          for i in 1 2 3; do
            if $CREATE_CMD 2>&1 | tee create_env.log; then
              echo "mamba env create succeeded"
              break
            else
              echo "mamba env create failed (attempt $i)"
              tail -n +1 create_env.log | sed -n '1,200p'
              sleep $((i * 5))
              if [ "$i" -eq 3 ]; then
                echo "mamba failed after 3 attempts, falling back to conda env create"
                conda env create -f environment.yml -n cxxgeom 2>&1 | tee create_env_conda.log || true
              fi
            fi
          done

      - name: Activate env and run post-link (if present)
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate cxxgeom
          echo "Conda envs:"
          conda info --envs
          echo "Listing cxxgeom packages (trimmed)"
          conda list -n cxxgeom | sed -n '1,200p'
          if [ -f .conda/post-link.sh ]; then
            bash .conda/post-link.sh
          fi

      # 3️⃣ Configure (CMake)
      # 3️⃣ Clean previous build artifacts (prevent CMakeCache mismatch on runners)
      - name: Clean previous build artifacts
        run: |
          echo "Removing any pre-existing build directory and CMake cache files"
          rm -rf build
          rm -f CMakeCache.txt
          rm -rf CMakeFiles

      - name: Configure CMake
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate cxxgeom
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      # 4️⃣ Build (Ninja)
      - name: Build
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate cxxgeom
          cmake --build build --config Release

      # 5️⃣ Run Tests (CTest)
      - name: Run unit tests
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate cxxgeom
          cd build
          ctest --output-on-failure --verbose
